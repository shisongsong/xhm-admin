@function remove-nth($list, $index) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    } @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    } @else if math.abs($index) > list.length($list) {
        @warn "List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.";
    } @else {
        $result: ();
        $index: if($index < 0, list.length($list) + $index + 1, $index);

        @for $i from 1 through list.length($list) {
            @if $i != $index {
                $result: list.append($result, list.nth($list, $i));
            }

        }

    }

    @return $result;

}
/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {
    @if nth($keys, 1) == null {
        $keys: remove-nth($keys, 1);
    }

    @each $key in $keys {
        /* stylelint-disable-next-line scss/no-global-function-names */
        $map: map-get($map, $key);
    }

    @return $map;

}

@function _palette($keys...) {
    @return val($palette, $keys...);
}

@function _layout($keys...) {
    @return val($layout, $keys...);
}

@function _fontfamily($keys...) {
    @return val($fontfamily, $keys...);
}

@function _fontsize($keys...) {
    @return val($fontsize, $keys...);
}

@function _fontweight($keys...) {
    @return val($fontweight, $keys...);
}

@function _breakpoint($keys...) {
    @return val($breakpoint, $keys...);
}
